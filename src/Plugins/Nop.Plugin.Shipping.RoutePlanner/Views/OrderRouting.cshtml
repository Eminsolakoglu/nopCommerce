@model Nop.Plugin.Shipping.RoutePlanner.Models.ConfigurationModel

@{
    Layout = "_AdminLayout";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Filtreli Sipariş Tablosu</title>
    <style>
        /* Genel stiller */
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
        }

        .container {
            margin: 20px;
        }

        .filter-section {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

            .filter-section input, .filter-section select {
                padding: 8px;
                width: 200px;
            }

        .table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

            .table th, .table td {
                border: 1px solid #ddd;
                padding: 8px;
            }

            .table th {
                background-color: #f2f2f2;
            }
    </style>
</head>
<body>
    <div class="container">
        <h2>Filtreli Sipariş Tablosu</h2>

        <!-- Filtreleme Alanı -->
        <div class="filter-section">
            <div>
                <label for="startDate">Başlangıç Tarihi:</label><br>
                <input type="date" id="startDate" />
            </div>
            <div>
                <label for="endDate">Bitiş Tarihi:</label><br>
                <input type="date" id="endDate" />
            </div>
            <div>
                <label for="orderNumber">Sipariş Numarası:</label><br>
                <input type="text" id="orderNumber" placeholder="Sipariş No" />
            </div>
            <div>
                <label for="county">İlçe:</label><br>
                <input type="text" id="county" placeholder="İlçe" />
            </div>
            <button id="filterButton">Filtrele</button>
        </div>

        <!-- Sipariş Tablosu -->
        <table class="table">
            <thead>
                <tr>
                    <td><input type="checkbox" class="orderCheckbox" /></td>
                    <th>Order Number</th>
                    <th>Paid Date</th>
                    <th>County</th>
                    <th>Address</th>
                    <th>Phone Number</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>ZipPostalCode</th>
                </tr>
            </thead>
            <tbody id="orderTableBody">
                <!-- Dinamik olarak veritabanından gelen siparişler -->
                @foreach (var order in Model.OrdersNotPickedUp)
                {
                    <tr>
                        <td><input type="checkbox" class="orderCheckbox" value="@order.Id" /></td>
                        <td>@order.CustomOrderNumber</td>
                        <td>@order.PaidDateUtc?.ToString("yyyy-MM-dd")</td>
                        <td>@order.County</td>
                        <td>@order.Address1</td>
                        <td>@order.PhoneNumber</td>
                        <td>@order.FirstName</td>
                        <td>@order.LastName</td>
                        <td>@order.ZipPostalCode</td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Sırala butonu -->
        <button id="sortButton">Manuel Sıraya Sok</button>

        <!-- Seçilenler Tablosu -->
        <h2>Manuel Sıra ile Rotalanacak Siparişler</h2>
        <table class="table">
            <thead>
                <tr>
                    <th> </th>
                    <th>Order Number</th>
                    <th>Paid Date</th>
                    <th>County</th>
                    <th>Address</th>
                    <th>Phone Number</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>ZipPostalCode</th>
                </tr>
            </thead>
            <tbody id="selectedTableBody">
                <!-- Seçilen siparişler burada görünecek -->
            </tbody>

        </table>
        <button id="routeButton">Rotalamayı Başlat</button>
        <button id="customRouteButton">Manuel Sıra ile Rota</button> <!-- Yeni buton -->
        <button id="sendToCourierButton">Rotayı Kuryeye Gönder</button>        <!-- Rotayı Kuryeye Gönder Butonu -->
        <!-- Harita -->
        <div id="map" style="height: 400px; width: 100%;"></div>

        <!-- Rota özeti -->
        <div id="route-summary"></div>



    </div>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCzfTVrn-iHTvvAhZjH58F-yharguYeaR4&callback=initMap"></script>

    <script>
        let map;
        let directionsService;
        let directionsRenderer;

        function initMap() {
            // Depo adresi
            const depot = { lat: 40.9962, lng: 29.0781 }; // Örnek Mahallesi, Ebrar Sokak, Ataşehir/İstanbul

            // Haritayı oluştur (başlangıçta sadece depo gösterilir)
            map = new google.maps.Map(document.getElementById("map"), {
                center: depot,
                zoom: 12,
            });

            // Sadece depo yer işaretini göster
            new google.maps.Marker({
                position: depot,
                map: map,
                title: "Depot",
            });

            // "Rotalamayı Başlat" butonuna tıklandığında harita ve yönlendirme hizmetlerini başlat
            document.getElementById("routeButton").addEventListener("click", function () {
                directionsService = new google.maps.DirectionsService();
                directionsRenderer = new google.maps.DirectionsRenderer();
                directionsRenderer.setMap(map);
                calculateAndDisplayRoute(directionsService, directionsRenderer, depot);
            });

            // Manuel rota sırasını başlat
            document.getElementById("customRouteButton").addEventListener("click", function () {
                directionsService = new google.maps.DirectionsService();
                directionsRenderer = new google.maps.DirectionsRenderer();
                directionsRenderer.setMap(map);
                calculateAndDisplayCustomRoute(directionsService, directionsRenderer, depot);
            });

            // Tüm checkbox'ları kontrol eden checkbox
            document.querySelector("thead .orderCheckbox").addEventListener("change", function () {
                var isChecked = this.checked;
                var checkboxes = document.querySelectorAll("tbody .orderCheckbox");
                checkboxes.forEach(function (checkbox) {
                    checkbox.checked = isChecked;
                });
            });

            // Filtreleme işlemi
            document.getElementById("filterButton").addEventListener("click", function () {
                var startDate = document.getElementById("startDate").value;
                var endDate = document.getElementById("endDate").value;
                var orderNumber = document.getElementById("orderNumber").value.toLowerCase();
                var county = document.getElementById("county").value.toLowerCase();
                var rows = document.querySelectorAll("#orderTableBody tr");

                rows.forEach(function (row) {
                    var orderDate = row.cells[2].textContent;
                    var orderNum = row.cells[1].textContent.toLowerCase();
                    var orderCounty = row.cells[3].textContent.toLowerCase();

                    // Filtre koşullarını kontrol et
                    if ((startDate === "" || new Date(orderDate) >= new Date(startDate)) &&
                        (endDate === "" || new Date(orderDate) <= new Date(endDate)) &&
                        (orderNumber === "" || orderNum.includes(orderNumber)) &&
                        (county === "" || orderCounty.includes(county))) {
                        row.style.display = ""; // Satırı göster
                    } else {
                        row.style.display = "none"; // Satırı gizle
                    }
                });
            });
        }

        function getRouteURL(response) {
            const legs = response.routes[0].legs;
            let routeUrl = "https://www.google.com/maps/dir/?api=1&travelmode=driving";

            // İlk waypoint olarak başlangıç noktasını ekleyelim
            routeUrl += `&origin=${legs[0].start_location.lat()},${legs[0].start_location.lng()}`;

            // Orta noktalara waypoints olarak ekleme yapalım
            let waypoints = legs.slice(0, -1).map(leg => {
                return `${leg.end_location.lat()},${leg.end_location.lng()}`;
            }).join('|');
            routeUrl += `&waypoints=${waypoints}`;

            // Son waypoint olarak varış noktasını ekleyelim
            const lastLeg = legs[legs.length - 1];
            routeUrl += `&destination=${lastLeg.end_location.lat()},${lastLeg.end_location.lng()}`;

            return routeUrl;
        }

        document.getElementById("sendToCourierButton").addEventListener("click", function () {
            if (directionsRenderer) {
                const directions = directionsRenderer.getDirections();
                const routeURL = getRouteURL(directions);

                // Rotanın URL'sini kopyala
                navigator.clipboard.writeText(routeURL).then(() => {
                    alert("Rota linki kopyalandı! Kuryeye gönderebilirsiniz.");
                }).catch(err => {
                    console.error('Rota linki kopyalanamadı:', err);
                });
            } else {
                alert("Lütfen önce rotayı oluşturun.");
            }
        });

        function calculateAndDisplayRoute(directionsService, directionsRenderer, depot) {
            const waypts = [];
            const checkboxes = document.querySelectorAll('.orderCheckbox:checked');
            const orderInfos = [];

            checkboxes.forEach(checkbox => {
                const row = checkbox.closest('tr');
                const address = row.cells[4].textContent;
                const orderNumber = row.cells[1].textContent; // Sipariş numarası
                const customerName = row.cells[5].textContent + ' ' + row.cells[6].textContent; // Müşteri adı (First Name + Last Name)
                waypts.push({
                    location: address,
                    stopover: true
                });

                // Sipariş bilgilerini kaydet
                orderInfos.push({
                    orderNumber: orderNumber,
                    customerName: customerName,
                    address: address
                });
            });

            directionsService.route({
                origin: depot,
                destination: depot,
                waypoints: waypts,
                optimizeWaypoints: true,
                travelMode: google.maps.TravelMode.DRIVING
            }, (response, status) => {
                if (status === 'OK') {
                    directionsRenderer.setDirections(response);
                    const route = response.routes[0];
                    const summaryPanel = document.getElementById('route-summary');
                    summaryPanel.innerHTML = '';

                    // Özet bilgilerini ekleyin
                    route.legs.forEach((leg, index) => {
                        summaryPanel.innerHTML +=
                            `<b>Stop ${index + 1}:</b> ${orderInfos[index].orderNumber} - ${orderInfos[index].customerName}<br>
                                        <b>Address:</b> ${leg.end_address}<br>
                                        <b>Distance:</b> ${leg.distance.text}, <b>Duration:</b> ${leg.duration.text}<br><br>`;
                    });
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }

        function calculateAndDisplayCustomRoute(directionsService, directionsRenderer, depot) {
            const waypts = [];
            const selectedRows = document.querySelectorAll('#selectedTableBody tr');
            const orderInfos = [];

            selectedRows.forEach(row => {
                const address = row.cells[4].textContent;
                const orderNumber = row.cells[1].textContent; // Sipariş numarası
                const customerName = row.cells[5].textContent + ' ' + row.cells[6].textContent; // Müşteri adı (First Name + Last Name)
                waypts.push({
                    location: address,
                    stopover: true
                });

                // Sipariş bilgilerini kaydet
                orderInfos.push({
                    orderNumber: orderNumber,
                    customerName: customerName,
                    address: address
                });
            });

            directionsService.route({
                origin: depot,
                destination: depot,
                waypoints: waypts,
                optimizeWaypoints: false, // Manuel sıralama yapılacak
                travelMode: google.maps.TravelMode.DRIVING
            }, (response, status) => {
                if (status === 'OK') {
                    directionsRenderer.setDirections(response);
                    const route = response.routes[0];
                    const summaryPanel = document.getElementById('route-summary');
                    summaryPanel.innerHTML = '';

                    // Özet bilgilerini ekleyin
                    route.legs.forEach((leg, index) => {
                        summaryPanel.innerHTML +=
                            `<b>Stop ${index + 1}:</b> ${orderInfos[index].orderNumber} - ${orderInfos[index].customerName}<br>
                                        <b>Address:</b> ${leg.end_address}<br>
                                        <b>Distance:</b> ${leg.distance.text}, <b>Duration:</b> ${leg.duration.text}<br><br>`;
                    });
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }

        // "Sırala" butonuna tıklandığında seçilen satırları aşağıya ekleme işlemi
        document.getElementById("sortButton").addEventListener("click", function () {
            var selectedRows = document.querySelectorAll("#orderTableBody .orderCheckbox:checked");
            var selectedTableBody = document.getElementById("selectedTableBody");

            selectedRows.forEach(function (row) {
                var newRow = row.closest("tr").cloneNode(true);
                selectedTableBody.appendChild(newRow);
                row.checked = false; // Seçimi kaldır
            });
        });

        initMap();
    </script>

</body>
</html>